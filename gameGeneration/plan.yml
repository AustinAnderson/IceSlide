model the game as component wise vectors summing to (end tile)-(start tile):

- generate vectors piece wise as:
  - x pos:
      - say x of max width is 17 and min is 0, and finish is 16:
          - init move array: [ ((17/2), -(17/2))*, (16/2), (16/2)] 
            (last pair's second number plus one if odd)

          - subtract random number%(17/2) from first of each pair 
            and add it to the other of each pair

            [ 8, -8, 8, -8, 8, 8] 
            [-2, +2,-4, +4,-1,+1] 
            =====================
            [ 6,-10, 4,-12, 7, 9]

          - sub or add can be flipped randomly as long as it's by pair:

            [ 8, -8, 8, -8, 8, 8] 
            [+2, -2,-4, +4,+1,-1] 
            =====================
            [10, -6, 4,-12, 9, 7]

  - y pos: do the same as x, with same init move array length

- plot all vectors on the board, and place a stone at the tile after the vector, then fill the rest as ice

- now the board is garunteed to have a winning game sequence!

                


     
